นี่คือคำอธิบายการทำงานของเว็บแอปพลิเคชัน Concert Tracker จากไฟล์โค้ดที่คุณให้มาครับ

เว็บแอปพลิเคชันนี้เป็น "Concert Tracker" ที่สร้างขึ้นโดยใช้ Flask ซึ่งเป็นเฟรมเวิร์กของ Python จุดประสงค์หลักคือการดึงข้อมูลคอนเสิร์ตจาก ThaiTicketMajor และผสานการทำงานเข้ากับ Spotify และ Google Calendar

การทำงานแบ่งออกเป็น 3 ส่วนหลัก: Backend (ตรรกะเบื้องหลัง), Frontend (หน้าเว็บที่ผู้ใช้เห็น) และการเชื่อมต่อบริการภายนอก

1. Backend (ไฟล์ app.py)
นี่คือ "สมอง" ของแอปพลิเคชันที่ทำงานบนเซิร์ฟเวอร์

การดึงข้อมูลคอนเสิร์ต (Scraping):

แอปมีฟังก์ชัน scrape_thaiticketmajor ที่ใช้ไลบรารี requests และ BeautifulSoup เพื่อพยายามดึงข้อมูลคอนเสิร์ต "สด" จากเว็บไซต์ ThaiTicketMajor

ข้อมูลสำรอง: ในกรณีที่การดึงข้อมูลสดล้มเหลว (เช่น เว็บไซต์มีการเปลี่ยนแปลงหรือล่ม) แอปจะเปลี่ยนไปอ่านข้อมูลคอนเสิร์ตจากไฟล์ concerts.json ที่เก็บไว้ในเครื่องแทน

API Endpoints (ช่องทางสื่อสาร):

/api/concerts: นี่คือเส้นทางหลักที่หน้าเว็บใช้เรียกเพื่อขอรายการคอนเสิร์ต (จะได้ข้อมูลสดหรือข้อมูลสำรอง ขึ้นอยู่กับว่าการ scraping สำเร็จหรือไม่)

/api/artist-concerts: เมื่อผู้ใช้ค้นหาศิลปิน แอปจะพยายามดึงข้อมูลสดโดยใช้คำค้นหานั้น หากล้มเหลว ก็จะไปค้นหาชื่อศิลปินในไฟล์ concerts.json แทน

/api/auth-status: แจ้งให้หน้าเว็บทราบว่าผู้ใช้ล็อกอิน Spotify หรือ Google แล้วหรือยัง

/api/spotify/top-artists: หากผู้ใช้ล็อกอิน Spotify ไว้ API นี้จะดึงรายชื่อศิลปิน 5 อันดับแรกที่ผู้ใช้ฟังบ่อย

/api/add-to-calendar: (POST) เมื่อผู้ใช้กดปุ่ม "เพิ่มลงปฏิทิน" ข้อมูลคอนเสิร์ตจะถูกส่งมาที่นี่ และแอปจะสร้าง Event ใน Google Calendar ของผู้ใช้

2. Frontend (ไฟล์ index.html)
นี่คือหน้าเว็บที่ผู้ใช้โต้ตอบด้วย ซึ่งสร้างจาก HTML, CSS (style.css) และ JavaScript ที่ฝังอยู่ใน index.html

การโหลดหน้าเว็บ:

เมื่อผู้ใช้เปิดหน้าเว็บ (DOMContentLoaded) JavaScript จะทำงานทันที

มันจะยิงคำขอไปยัง /api/auth-status เพื่อตรวจสอบสถานะการล็อกอิน และแสดงผลปุ่ม "เข้าสู่ระบบ" หรือ "เชื่อมต่อแล้ว" ได้อย่างถูกต้อง

จากนั้น จะยิงคำขอไปยัง /api/concerts เพื่อดึงรายการคอนเสิร์ตมาแสดงผล

หากพบว่าล็อกอิน Spotify แล้ว ก็จะยิงคำขอไปที่ /api/spotify/top-artists เพื่อนำศิลปินมาแสดงผลด้วย

การค้นหา:

ช่องค้นหา (Search Box) ไม่ได้ค้นหาข้อมูลภายในแอป

เมื่อผู้ใช้พิมพ์ชื่อศิลปินแล้วกด Enter มันจะเป็นการเปิดแท็บใหม่ไปยังหน้าผลการค้นหาของเว็บไซต์ ThaiTicketMajor โดยตรง

การแสดงผลแบบไดนามิก:

หน้าเว็บมี 2 มุมมองหลัก: #main-view (หน้าหลัก) และ #artist-view (หน้าแสดงคอนเสิร์ตของศิลปินที่เลือก)

เมื่อผู้ใช้คลิกที่การ์ดศิลปิน (จาก Spotify) หน้าเว็บจะสลับไปที่ #artist-view และเรียก /api/artist-concerts เพื่อแสดงคอนเสิร์ตของศิลปินนั้น

Logic พิเศษ (Hardcoded):

ในโค้ด JavaScript มีการเขียน Logic "เฉพาะกิจ" ไว้สำหรับศิลปิน "Dept" และ "BIBI"

หากผู้ใช้คลิกที่ศิลปินสองคนนี้ แอปจะไม่ไปดึงข้อมูลจาก API แต่จะแสดงผลข้อมูลคอนเสิร์ตที่กำหนดไว้ตายตัวในโค้ด JavaScript ทันที (เช่น รูปภาพ, URL) (ข้อมูลของ BIBI ถูกดึงมาจาก concerts.json และไฟล์ resize_image.py ก็เป็นสคริปต์ช่วยสำหรับเตรียมรูปภาพของ BIBI)

3. การเชื่อมต่อบริการภายนอก (Auth)
แอปนี้ใช้การยืนยันตัวตนแบบ OAuth2 เพื่อเชื่อมต่อกับ Spotify และ Google โดยใช้ข้อมูลจากไฟล์ .env

Spotify:

/login เริ่มกระบวนการล็อกอิน Spotify

/callback เป็นหน้าที่ Spotify จะส่งผู้ใช้กลับมาหลังจากล็อกอินสำเร็จ พร้อมกับ Token

Token นี้จะถูกเก็บไว้ใน session เพื่อใช้เรียกข้อมูล Top Artists

Google Calendar:

/google-login เริ่มกระบวนการเชื่อมต่อ Google

/google-callback เป็นหน้าที่ Google ส่งผู้ใช้กลับมาหลังอนุญาตสิทธิ์

การจัดการวันที่ (สำคัญ): เมื่อผู้ใช้กด "เพิ่มลงปฏิทิน" ข้อมูลคอนเสิร์ตจะถูกส่งไปที่ Backend

Backend (ไฟล์ app.py) พยายามแปลงสตริงวันที่ (เช่น "22 พ.ย. 2568" จาก concerts.json) ให้เป็นรูปแบบที่ Google Calendar เข้าใจ

เนื่องจากรูปแบบวันที่ใน concerts.json ไม่ใช่มาตรฐาน ISO การแปลงนี้จึง ล้มเหลว

ในกรณีนี้ แอปจะสร้าง Event ในปฏิทินโดยตั้งค่าเป็น "วันนี้ เวลา 12:00 น." และเพิ่มข้อความ "หมายเหตุ: ไม่สามารถประมวลผลวันที่...ได้" ลงในช่องรายละเอียด (Description) ของ Event เพื่อให้ผู้ใช้ไปแก้ไขวันที่ด้วยตนเอง


แอป Concert Tracker นี้ทำงานโดยการดึงข้อมูลคอนเสิร์ตจาก ThaiTicketMajor มาแสดงผล และอนุญาตให้ผู้ใช้เชื่อมต่อกับ Spotify เพื่อดูศิลปินคนโปรด และเชื่อมต่อกับ Google Calendar เพื่อบันทึกอีเวนต์

นี่คือสรุปการทำงานหลักๆ ครับ:

### 1. การดึงข้อมูลคอนเสิร์ต (Scraping)

แอปมีวิธีดึงข้อมูลคอนเสิร์ต 2 รูปแบบ:

1.  **การดึงข้อมูลสด (Live Scrape):** เมื่อคุณเปิดหน้าเว็บ (`/api/concerts`) ตัวแอป `app.py` จะพยายามดึงข้อมูลคอนเสิร์ตจากหน้าเว็บ ThaiTicketMajor ในขณะนั้นทันที
2.  **ข้อมูลสำรอง (Fallback):** หากการดึงข้อมูลสดล้มเหลว (เช่น เว็บล่ม หรือไม่พบข้อมูล) แอปจะเปลี่ยนไปอ่านข้อมูลจากไฟล์ `concerts.json` ที่เก็บไว้ในระบบแทน ไฟล์ `concerts.json` นี้ ถูกสร้างขึ้นมาจากการรันสคริปต์ `scraper.py` (ซึ่งเป็นสคริปต์แยก)

### 2. การเชื่อมต่อ Spotify

* ผู้ใช้สามารถล็อกอินด้วย Spotify (`/login`)
* หากล็อกอินสำเร็จ หน้าเว็บจะเรียก `/api/spotify/top-artists` เพื่อดึงรายชื่อศิลปิน 5 อันดับแรกที่ผู้ใช้ฟังบ่อยมาแสดง
* เมื่อผู้ใช้คลิกที่การ์ดศิลปิน (เช่น BIBI หรือ Dept) หน้าเว็บจะเปลี่ยนไปแสดงคอนเสิร์ตของศิลปินนั้น
* **Logic พิเศษ:** สำหรับศิลปิน "Dept" และ "BIBI" ข้อมูลคอนเสิร์ต (เช่น รูปภาพ, URL) จะถูกดึงมาจากข้อมูลที่ **Hardcode (ฝัง) ไว้ตายตัว**ในไฟล์ `index.html` โดยตรง ไม่ได้เรียก API

### 3. การเชื่อมต่อ Google Calendar

* ผู้ใช้สามารถเชื่อมต่อบัญชี Google (`/google-login`)
* เมื่อผู้ใช้กดปุ่ม "เพิ่มลงปฏิทิน" บนการ์ดคอนเสิร์ต ข้อมูลคอนเสิร์ตนั้นจะถูกส่งไปยัง `/api/add-to-calendar`
* **ข้อจำกัด:** เนื่องจากรูปแบบวันที่ที่ดึงมา (เช่น "22 พ.ย. 2568") ไม่ใช่รูปแบบมาตรฐาน (ISO) ที่ Google Calendar เข้าใจ
* **วิธีแก้ปัญหาของแอป:** `app.py` จะสร้างอีเวนต์ในปฏิทินโดยตั้งค่าวันที่เป็น **"วันนี้ เวลา 12:00 น."** แทน และจะเพิ่ม "หมายเหตุ" ลงในช่องรายละเอียดของอีเวนต์ เพื่อแจ้งให้ผู้ใช้เข้าไปแก้ไขวันที่ด้วยตนเอง

### 4. การค้นหา

* ช่องค้นหา (Search Box) ในหน้าเว็บ ไม่ได้ใช้ค้นหาข้อมูลภายในแอป
* เมื่อผู้ใช้พิมพ์ชื่อศิลปินแล้วกด Enter มันจะทำการเปิดแท็บใหม่เพื่อค้นหาชื่อนั้นบนเว็บไซต์ ThaiTicketMajor โดยตรง